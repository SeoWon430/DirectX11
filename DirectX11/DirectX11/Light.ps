




Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer {

    // 주변광
    float4 ambientColor;

    // 기본광(난반사광)
    float4 diffuseColor;

    // 광원 방향
    float3 lightDirection;

    // 버퍼 크기 맞추기
    // 4x으로 채워서 GPU에 넘김
	//float padding;
    
    // 정반사량
    // 4x 크기에 마추기 위해 specularColor보다 먼저 선언
    float specularPower;

    // 정반사광
    float4 specularColor;


};




struct PixelInputType {
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
    float3 viewDirection : TEXCOORD1;
};




float4 LightPixelShader(PixelInputType input) : SV_TARGET {
	float4 textureColor;
	float3 lightDir;
	float lightIntensity;
	float4 color;

    float3 reflection;
    float4 specular;

    // 정반사 색상 초기화
    specular = float4(0, 0, 0, 0);

	// 텍스쳐를 샘플링하여 색상을 처리
	textureColor = shaderTexture.Sample(SampleType, input.tex);

    // 주변광은 빛의 최소 크기를 의미
    color = ambientColor;

	// 빛의 방향 반전
    lightDir = -lightDirection;

    // 현재 픽셀에 닿는 빛의 양(빛의 세기) 계산
    // 빛의 방향과 현재 픽셀의 노멀(방향)에 따라 달라짐 (내적연산으로 계산)
    lightIntensity = saturate(dot(input.normal, lightDir));

    // 빛의 세기가 0 이상인 경우에만 적용
    if(lightIntensity > 0.0f) {
        // 빛의 세기와 빛의 색상을 고려하여 빛에 의한 최종 색상 계산
        color += (diffuseColor * lightIntensity);
        
        // 색상을 정규화
        // 값을 0~1사이로 재설정
        color = saturate(color);

        reflection = normalize(2 * lightIntensity * input.normal - lightDir);

        specular = pow ( saturate( dot( reflection, input.viewDirection)), specularPower);
    }
    // 결과적으로 color는 무조건 ambientColor 값 이상이 되어 완전한 검은색이 되지 않음

    
    // 빛의 세기와 빛의 색상을 고려하여 빛에 의한 최종 색상 계산
    //color = saturate(diffuseColor * lightIntensity);

    // 텍스쳐의 색상과 빛의 색상을 곱하여 최종적으로 보일 색상 계산
    color = color * textureColor;

    // 최종 색상에 정반사광 추가
    // 색상 값이 커져 밝아짐 (빛을 정면으로 받으면 1값으로 됨)
    color = saturate( color + specular );

    return color;
}